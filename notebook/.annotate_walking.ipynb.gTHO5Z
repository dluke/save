{"cells":[{"cell_type":"markdown","metadata":{},"source":[" Analyse walking trajectories starting with the human annotations\n"," see ./animate/walking_annotation_notes.md for the annotation scheme"]},{"cell_type":"code","execution_count":35,"metadata":{},"outputs":[],"source":["import sys, os\n","join = lambda *x: os.path.abspath(os.path.join(*x))\n","import numpy as np\n","import json\n","import _fj\n","from copy import copy\n","import matplotlib\n","import matplotlib.pyplot as plt\n","import shutil\n","\n","import twanalyse\n"]},{"cell_type":"code","execution_count":36,"metadata":{},"outputs":[],"source":["# config\n","verbose = False\n"]},{"cell_type":"code","execution_count":37,"metadata":{},"outputs":[],"source":["# paths\n","# notedir = os.path.normpath(os.path.dirname(__file__))\n","notedir = os.getcwd()\n","tagfile = join(notedir, \"./animate/walking_meta.json\")\n","with open(tagfile, 'r') as f:\n","    tagdata = json.load(f)\n","\n","def tokey(idx): \n","    # convert back to key from idx\n","    return '{:04d}'.format(int(idx))\n"]},{"cell_type":"code","execution_count":38,"metadata":{},"outputs":[{"name":"stderr","output_type":"stream","text":["100%|██████████| 371/371 [00:00<00:00, 5164.46it/s]\n","100%|██████████| 3113/3113 [00:01<00:00, 2752.63it/s]\n"]}],"source":["lowaspect_idx, lowaspect_trs = _fj.slicehelper.load_trs('default_walking_list')\n","all_idx, ltrs = _fj.slicehelper.load_linearized_trs('all')\n"]},{"cell_type":"code","execution_count":39,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["found tags for 371 tracks\n","number of tracks in low aspect set 371\n","continue...\n"]}],"source":["# first compare tag data with low aspect set\n","print(\"found tags for {} tracks\".format(len(tagdata.keys())))\n","print(\"number of tracks in low aspect set {}\".format(len(lowaspect_idx)))\n","tagidx = np.array([int(k) for k in tagdata.keys()])\n","if len(tagdata.keys()) != len(lowaspect_idx):\n","    missing_up = lowaspect_idx[~np.in1d(lowaspect_idx, tagidx)]\n","    missing_down = tagidx[~np.in1d(tagidx, lowaspect_idx)]\n","    print(\"missing tags {}, missing trajectory\".format(missing_up, missing_down))\n","else:\n","    print(\"continue...\")\n"]},{"cell_type":"code","execution_count":40,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Counter({'walking': 207, 'crawling': 74, 'static': 40, 'transition': 34, 'horizontal': 20, 'short': 20, 'crawling?': 18, 'vertical': 16, 'transition?': 16, 'walking?': 14, 'persistent': 6, 'static_pole?': 5, 'static_pole': 4, 'walking, crawling, transition': 4, 'bidirectional?': 1, 'static?': 1, 'horizontal?': 1, 'persistent?': 1})\n"]},{"data":{"text/plain":["[[175, 221], [46, 92], [37, 41]]"]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["# check the tags\n","import collections\n","\n","tagcount = collections.Counter()\n","for tags in tagdata.values():\n","    tagcount.update(tags)\n","print(tagcount)\n","\n","# a stacked bar graph showing the number of walking, crawling \n","# and static tags and in addition the number of pure [\"walking\"] tags in particular\n","def popitem(item, lst):\n","    # pop item from list if it exists else return None\n","    if item in lst:\n","        return lst.pop(lst.index(item))\n","    else:\n","        return None\n","    \n","\n","permitted = [\"persistent\", \"persistent?\"]\n","def get_pure(target, permitted=[]):\n","    pure_idx = []\n","    for idx, tags in tagdata.items():\n","        tags = copy(tags)\n","        c1 = popitem(target, tags)\n","        if c1:\n","            permit = True\n","            for tag in tags:\n","                if tag not in permitted:\n","                    permit = False\n","        if bool(c1) and permit:\n","            pure_idx.append(idx)\n","    return pure_idx\n","    \n","pure_walking_kidx = get_pure(\"walking\", permitted)\n","pure_crawling_kidx = get_pure(\"crawling\", permitted)\n","pure_static_kidx = get_pure(\"static\", \n","    [\"horizontal\", \"horizontal?\", \"vertical\", \"vertical?\"])\n","def _include_uncertain_get(word):\n","    return tagcount[word] + tagcount[word+'?']\n","barhdata = [\n","    [len(pure_walking_kidx), _include_uncertain_get(\"walking\")],\n","    [len(pure_crawling_kidx), _include_uncertain_get(\"crawling\")],\n","    [len(pure_static_kidx), _include_uncertain_get(\"static\")]\n","]\n","barhdata\n","# TODO plot this as stacked bar\n","\n"]},{"cell_type":"code","execution_count":41,"metadata":{},"outputs":[],"source":["# not all trajectories are mode equal, look are pure walking distributions\n","pure_walking_idx = np.array(list(map(int,  pure_walking_kidx)))\n","pure_walking_trs = [ltrs[idx] for idx in pure_walking_idx]\n"]},{"cell_type":"code","execution_count":42,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["pole identification accuracy approx 60.0%\n"]}],"source":["# I give the walking trajectories about 50/50 odds of having their surface \n","# and off surface poles correctly identified\n","# create a little dataset to test this assessment\n","rg = np.random.RandomState(0)\n","smallset = sorted(rg.choice(pure_walking_idx, 20, replace=False))\n","# go ahead and shift these animations into a new folder\n","tdir = join(notedir, \"./animate/smallset/\")\n","if not os.path.exists(tdir):\n","    os.makedirs(tdir)\n","form = join(notedir, \"./animate/walking/animate_{:04d}.mp4\")\n","for idx in smallset:\n","    target = form.format(idx)\n","    if verbose:\n","        print(\"{} --> {}\".format(target, tdir))\n","    shutil.copy2(target, tdir)\n","# create a template json file\n","smalldatapath = join(tdir, \"smallset.json\")\n","if not os.path.exists(smalldatapath):\n","    print(\"writing data template to {}\".format(smalldatapath))\n","    template = collections.OrderedDict([(tokey(k), []) for k in sorted(smallset)])\n","    content = json.dumps(template, indent=1)\n","    with open(smalldatapath, \"w\") as f:\n","        f.write(content)\n","# load back the human annotations with or [\"flipped\"] empty []\n","with open(smalldatapath, 'r') as f:\n","    flipdata = json.load(f)\n","# count the flips\n","nflips = sum(map(int, ['flipped' in tags for tags in flipdata.values()]))\n","accuracy = 1. - float(nflips)/len(flipdata)\n","print('pole identification accuracy approx {:.1f}%'.format(100*accuracy))\n"]},{"cell_type":"markdown","metadata":{},"source":[" so lets improve this by comparing two things:\n"," (i) the distance traveled of the two poles\n"," (ii) the correlation of body vector with direction"]},{"cell_type":"code","execution_count":43,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["human + machine agreement 90.0%\n"]}],"source":["# compute a better algorithm for identifying the head\n","norm = np.linalg.norm\n","def pole_travel(tr):\n","    # negative score implies poles should be flipped \n","    adx = tr.get_step_dx()\n","    bdx = tr.get_step_dx(trail=True)\n","    atravel = np.sum(norm(adx, axis=1))\n","    btravel = np.sum(norm(bdx, axis=1))\n","    return atravel, btravel\n","\n","def pole_travel_score(tr):\n","    atravel, btravel = pole_travel(tr)\n","    score = (btravel-atravel)/(btravel+atravel)\n","    return score\n","\n","def body_corr(tr):\n","    # compute the correlation between body orientation and movement direction\n","    apole = tr.get_head()[:,:2]\n","    bpole = tr.get_trail()[:,:2]\n","    # compute body direction\n","    body = apole - bpole\n","    normalize = norm(body,axis=1)[:,np.newaxis]\n","    with np.errstate(divide='ignore', invalid='ignore') as errstate:\n","        body = body/normalize \n","    body[np.isnan(body)] = 0. # set nan to zero\n","    # compute movement direction\n","    center = (apole + bpole)/2\n","    center_dx = center[1:] - center[:-1]\n","    normv = norm(center_dx,axis=1)[:,np.newaxis]\n","    movement = center_dx/normv\n","    # dot product\n","    product = np.sum(movement*body[1:],axis=1)\n","    corr = np.mean(product)\n","    return corr\n","\n","def flip_score(tr):\n","    return body_corr(tr) + pole_travel_score(tr)\n","\n","def print_scores():\n","    agree = []\n","    disagree = []\n","    for idx in smallset:\n","        tr = ltrs[idx]\n","        score = flip_score(tr)\n","        # print(idx, flipdata[tokey(idx)], 'score', score)\n","        human_flip = 'flipped' in flipdata[tokey(idx)]\n","        machine_flip = score < 0\n","        if human_flip == machine_flip:\n","            agree.append(idx)\n","        else:\n","            disagree.append(idx)\n","    accuracy = float(len(agree))/len(smallset)\n","    print(\"human + machine agreement {:.1f}%\".format(100*accuracy))\n","print_scores()\n"]},{"cell_type":"code","execution_count":44,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["flip poles in pure walking dataset where appropriate\n","71 flips\n"]}],"source":["# lets apply the pole flipping algorithm\n","# NOTE: This operation changes the data!\n","flip_scores = []\n","nflips = 0\n","for tr in pure_walking_trs:\n","    score = flip_score(tr)\n","    flip_scores.append(score)\n","    if score < 0:\n","        tr.flip_poles()\n","        nflips += 1\n","print(\"flip poles in pure walking dataset where appropriate\")\n","print(\"{} flips\".format(nflips))\n","    "]},{"cell_type":"code","execution_count":45,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["71/175 flips\n"]},{"data":{"image/png":"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","text/plain":["<Figure size 432x144 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# compute leading and trailing pole velocities\n","\n","nbins = 20\n","fig = plt.figure(figsize=(6,2))\n","ax = fig.add_axes([1,1,1,1])\n","ax.hist(flip_scores, bins=20, rwidth=0.9)\n","ax.set_xlim((-1.2,1.2))\n","ax.set_xlabel(\"flip score\")\n","print(\"{}/{} flips\".format(nflips,len(pure_walking_idx)))\n"]},{"cell_type":"code","execution_count":46,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["leading pole mean speed  0.5531905188673579\n","trailing pole mean speed  0.48940481992237195\n"]}],"source":["duration = [tr.get_duration() for tr in pure_walking_trs]\n","nsteps = [len(tr.step_idx)-1 for tr in pure_walking_trs]\n","head_speed = [np.mean(tr.get_step_speed()) for tr in pure_walking_trs]\n","trail_speed = [np.mean(tr.get_step_speed(trail=True)) for tr in pure_walking_trs]\n","print(\"leading pole mean speed \", np.mean(head_speed))\n","print(\"trailing pole mean speed \", np.mean(trail_speed))\n","# persistence calculation\n","q_estimate = []\n","a_estimate = []\n","step_aspect = []\n","aspect_mean = []\n","aspect_var = []\n","for tr in pure_walking_trs:\n","    sd = twanalyse.mle_persistence([tr])\n","    q = sd['q']['estimate']\n","    a = sd['a']['estimate']\n","    q_estimate.append(q)\n","    a_estimate.append(a)\n","    # compute variance of aspect ratio\n","    aspect = tr['length']/tr['width'] \n","    aspect_mean.append(np.mean(aspect))\n","    aspect_var.append(np.var(aspect))\n","    step_aspect.append(tr['length'][tr.step_idx]/tr['width'][tr.step_idx])\n","\n"]},{"cell_type":"code","execution_count":47,"metadata":{},"outputs":[{"data":{"image/png":"